# -*- coding: utf-8 -*-
"""PngToBitmap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V5rhcsPDLq9AdxPV11fHfAhJKywzLQ4_
"""

#Binary Bitmap

from PIL import Image
import random 
from logging import error

from PIL import Image
import random
#Somehow print out a list 
def bmpFile(mList):

  img = Image.new('1', (150, 150)) #Input Height and width
  data = mList

  pixels = img.load()

  for i in range(img.size[0]):
      for j in range(img.size[1]):
          pixels[i, j] = data[i][j]
  flip_img = img.transpose(Image.TRANSPOSE) # if image is flipped disable this

  flip_img.show() 
  flip_img.save('/tmp/Name_Of_File.bmp') #Change the name
bmpFile(myList)

def listShape(width,height):
  myList = []
  for i in range (0, height): #creates how many list there are
    myList.append([0 for i in range(0,width)]) # creates how many indexes per list
  return myList

def magnitude(listm):

  y = ((listm[0]**2)+(listm[1]**2)+(listm[2]**2))**(1/2)
  return y

im = Image.open('/content/Saurabh.png' ,'r')


White = magnitude([150,150,150]) #White Pixels
pix_val = list(im.getdata())

print(pix_val) 
def check(): #Just for testing purposes
  for x in pix_val:
    if magnitude(x)!= White:
      

      print(x, count)
      count+=1
    else:
      print('White')



try:
  pix_val = [0 if (magnitude(x) < White) else 255 for x in pix_val] #Decolorize the image. 
except:
  pix_val = [0 if x<150 else 255 for x in pix_val] # Try an except detecks if the image rgb is in tuples or int







#Parameters
Width = 150
idxJump = Width # Input your Width
start = 0
end = Width
#image = [  for i in range(0,int(len(new_image)/102))]


myList= []

for i in range(0,int(len(pix_val)/Width)): #divide the length of the list by the Width


  myList.append(pix_val[start:end])

  start+=idxJump
  end+= idxJump

TestList = [1,2,3,4,5,6,7,8,9,0] 


#Rotation
'''print(len(myList))
print(cool)
def moveLeft(num,list = myList):
  for x in range(0,num):
    list[0].append(list[0].pop(0))
  return list[0]

def moveRight(num,list=myList):
  list[0].insert(0, list[0].pop())
  print(list[0])
  return list[0]

myList = moveLeft(255,myList)

print(myList)'''

def printImage(image,name): #Create a log of the image file

  with open('/content/{}.txt'.format(name), 'w') as f:
    for x in pix_val:
      letter = str(x)
      f.write(letter+ ' ')
  f.close()

printImage(pix_val, 'Logs')